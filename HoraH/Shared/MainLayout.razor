@using Domain.Interfaces.Configuration
@using Domain.Interfaces.Accessor
@using Domain.Interfaces.Business
@using Domain.Models.Bsn
@using Domain.Models.Bsn.Autorizacao
@using Domain.Models.ViewModels
@using Domain.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inherits LayoutComponentBase

@inject ProtectedLocalStorage ProtectedLocalStore
@inject IAppConfiguration AppConfiguration
@inject IColaboradorLogadoAccessor ColaboradorLogadoAccessor
@inject IAutorizacaoBusiness AutorizacaoBusiness
@inject IJSRuntime JSRuntime

<PageTitle>HoraH</PageTitle>

<div class='bg-hrh-fundo-non-important text-hrh-texto-non-important min-vh-100'>

    <Header NavToggled=@navToggled SetNavToggled=@SetNavToggled RefColaboradorLogado=@refColaboradorLogado />

    <main class="d-flex justify-content-end row g-0">
        @if (refColaboradorLogado.EstaLogado)
        {
            @if (hasRendered)
            {
                <CascadingValue Value=@cascSetRefColaboradorLogadoAsync Name="SetRefColaboradorLogadoAsync">
                    <CascadingValue Value=@cascSairEFecharAsync Name="SairEFecharAsync">
                        <CascadingValue Value=@cascSetMensagemDeAlerta Name="SetMensagemDeAlerta">
                            <CascadingValue Value=@cascSetMensagemConfirmar Name="SetMensagemConfirmar">
                                <CascadingValue Value=@cascLockUI Name="LockUI">
                                    <CascadingValue Value=@cascUnlockUI Name="UnlockUI">
                                        <CascadingValue Value=@cascVoltarAsync Name="VoltarAsync">
                                            <div class='col col-md-9 p-4'>
                                                @Body
                                            </div>
                                        </CascadingValue>
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            }
            @if (navToggled)
            {
                <div class='min-vw-100 min-vh-100 d-flex justify-content-center align-items-center position-fixed start-0 opacity-50 bg-dark d-md-none'>
            
                </div>
                <div class='h-100 col-7 position-fixed start-0 opacity-100 d-md-none bg-hrh-fundo-non-important'>
                    <NavMenu SetRefColaboradorLogadoAsync=@SetRefColaboradorLogadoAsync VoltarParaTelaEntrar=@VoltarParaTelaEntrar SetNavToggled=@SetNavToggled />
                </div>
            }
            
            <div class='h-100 d-none d-md-block position-fixed start-0 col-3 bg-hrh-fundo-non-important'>
                <NavMenu SetRefColaboradorLogadoAsync=@SetRefColaboradorLogadoAsync VoltarParaTelaEntrar=@VoltarParaTelaEntrar SetNavToggled=@SetNavToggled />
            </div>
        }
        else
        {
            <div class='col px-4 pt-4'>
                @if (estaNaTelaEntrar)
                {
                    <Entrar SetRefColaboradorLogadoAsync=@SetRefColaboradorLogadoAsync LockUI=@LockUI UnlockUI=@UnlockUI SetMensagemDeAlerta=@SetMensagemDeAlerta NavegarParaTelaCadastrar=@NavegarParaTelaCadastrar />
                }
                else
                {
                    <Cadastrar SetRefColaboradorLogadoAsync=@SetRefColaboradorLogadoAsync LockUI=@LockUI UnlockUI=@UnlockUI SetMensagemDeAlerta=@SetMensagemDeAlerta VoltarParaTelaEntrar=@VoltarParaTelaEntrar />
                }
            </div>
        }
        
    </main>

    <Footer />

    @if (mensagemDeAlerta.EstaAberto)
    {
        <MensagemDeAlerta DetalhesMensagemDeAlerta=@mensagemDeAlerta FecharMensagemDeAlerta=@FecharMensagemDeAlerta />
    }
    @if (mensagemConfirmar.EstaAberto)
    {
        <MensagemConfirmar DetalhesMensagemConfirmar=@mensagemConfirmar FecharMensagemConfirmar=@FecharMensagemConfirmar />
    }

    @if (estaCarregando)
    {
        <LoadingModal />
    }
</div>

@code {
    private List<string> processosComLockUI = new List<string>();
    public void LockUI(string idProccess)
    {
        if (!processosComLockUI.Contains(idProccess))
        {
            processosComLockUI.Add(idProccess);
        }
    }
    public void UnlockUI(string idProccess)
    {
        if (processosComLockUI.Contains(idProccess))
        {
            processosComLockUI.Remove(idProccess);
        }
    }
    public bool estaCarregando => processosComLockUI.Any();
    private string idRenderizarUpUsuario = MongoId.NewMongoId;
    private bool deveUpUsuarioLogado = false;
    private bool navToggled = false;
    public void SetNavToggled(bool upNavToggled)
    {
        navToggled = upNavToggled;
    }
    private bool estaNaTelaEntrar = true;
    public void NavegarParaTelaCadastrar()
    {
        estaNaTelaEntrar = false;
    }
    public void VoltarParaTelaEntrar()
    {
        estaNaTelaEntrar = true;
    }
    public async Task SairEFecharAsync()
    {
        await ProtectedLocalStore.SetAsync(AppConfiguration.LocalStoreKeyDoIdColaboradorLogado, new BsnColaboradorLogado());
        await JSRuntime.InvokeVoidAsync("close");
    }
    public async Task VoltarAsync()
    {
        await JSRuntime.InvokeVoidAsync("mdlHistory.historyBack");
    }
    private BsnColaboradorLogado refColaboradorLogado = new BsnColaboradorLogado();
    public async Task SetRefColaboradorLogadoAsync(BsnColaboradorLogado upRefColaboradorLogado)
    {
        await ProtectedLocalStore.SetAsync(AppConfiguration.LocalStoreKeyDoIdColaboradorLogado, upRefColaboradorLogado);
        deveUpUsuarioLogado = true;
        navToggled = false;
        LockUI(idRenderizarUpUsuario);
        StateHasChanged();
    }
    private DetalhesMensagemDeAlertaViewModel mensagemDeAlerta = new DetalhesMensagemDeAlertaViewModel();
    public void SetMensagemDeAlerta(DetalhesMensagemDeAlertaViewModel upMensagemDeAlerta)
    {
        mensagemDeAlerta = upMensagemDeAlerta;
        mensagemDeAlerta.EstaAberto = true;
    }
    public void FecharMensagemDeAlerta()
    {
        mensagemDeAlerta.EstaAberto = false;
    }
    private DetalhesMensagemConfirmarViewModel mensagemConfirmar = new DetalhesMensagemConfirmarViewModel();
    public void SetMensagemConfirmar(DetalhesMensagemConfirmarViewModel upMensagemConfirmar)
    {
        mensagemConfirmar = upMensagemConfirmar;
        mensagemConfirmar.EstaAberto = true;
    }
    public void FecharMensagemConfirmar()
    {
        mensagemConfirmar.EstaAberto = false;
    }
    protected override void OnInitialized()
    {
        deveUpUsuarioLogado = true;
        LockUI(idRenderizarUpUsuario);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            StateHasChanged();
            return;
        }
        if (deveUpUsuarioLogado)
        {
            var result = await ProtectedLocalStore.GetAsync<BsnColaboradorLogado>(AppConfiguration.LocalStoreKeyDoIdColaboradorLogado);
            if (result.Success && result.Value != null)
            {
                refColaboradorLogado = result.Value;
                ColaboradorLogadoAccessor.ColaboradorLogado = result.Value;
            }
            deveUpUsuarioLogado = false;
            UnlockUI(idRenderizarUpUsuario);
            StateHasChanged();
        }
    }
    public EventCallback<BsnColaboradorLogado> cascSetRefColaboradorLogadoAsync => EventCallback.Factory.Create<BsnColaboradorLogado>(this, SetRefColaboradorLogadoAsync);
    public EventCallback cascSairEFecharAsync => EventCallback.Factory.Create(this, SairEFecharAsync);
    public EventCallback<DetalhesMensagemDeAlertaViewModel> cascSetMensagemDeAlerta => EventCallback.Factory.Create<DetalhesMensagemDeAlertaViewModel>(this, SetMensagemDeAlerta);
    public EventCallback<DetalhesMensagemConfirmarViewModel> cascSetMensagemConfirmar => EventCallback.Factory.Create<DetalhesMensagemConfirmarViewModel>(this, SetMensagemConfirmar);
    public EventCallback<string> cascLockUI => EventCallback.Factory.Create<string>(this, LockUI);
    public EventCallback<string> cascUnlockUI => EventCallback.Factory.Create<string>(this, UnlockUI);
    public EventCallback cascVoltarAsync => EventCallback.Factory.Create(this, VoltarAsync);
    public bool hasRendered = false;

}