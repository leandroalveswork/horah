@page "/presenca"

@using Domain.Design.Patterns.Strategy
@using Domain.Models
@using Domain.Interfaces.Accessor
@using Domain.Interfaces.Repository
@using Domain.Interfaces.Business
@using Domain.Models.Bsn
@using Domain.Models.Bsn.Args
@using Domain.Models.Bsn.Autorizacao
@using Domain.Models.Bsn.Colaborador
@using Domain.Models.Bsn.Evento
@using Domain.Models.Bsn.Funcionalidade
@using Domain.Models.Bsn.Mes
@using Domain.Models.Bsn.Periodo
@using Domain.Models.Bsn.Presenca
@using Domain.Models.ViewModels
@using Domain.Interfaces.Configuration

@using Microsoft.AspNetCore.Mvc.Rendering

@inject IColaboradorLogadoAccessor ColaboradorLogadoAccessor
@inject IAutorizacaoBusiness AutorizacaoBusiness
@inject IColaboradorBusiness ColaboradorBusiness
@inject IPresencaBusiness PresencaBusiness
@inject IAppConfiguration AppConfiguration
@inject NavigationManager UriHelper

<PageTitle>Presença</PageTitle>

<div class='d-flex flex-column'>
    <h1>Filtros</h1>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Nome Colaborador</label>
            <input type='text' @bind="nomeColaborador" />
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Evento</label>
            <select @bind="idEvento">
                <option value="">Selecione...</option>
                @foreach (var iLtEvento in BsnEventoLiterais.ListarTodos())
                {
                    <option value=@(iLtEvento.Id)>@iLtEvento.Nome</option>
                }
            </select>
        </div>
    </div>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Mínimo Minutos</label>
            <input type='number' @bind="minimoMinutos" />
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Máximo Minutos</label>
            <input type='number' @bind="maximoMinutos" />
        </div>
    </div>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-sm-6 col-md-4 px-2 pt-3'>
            <label>[Autopreencher Período]:</label>
            <select value=@idAutopreencher @onchange=@OnChangeIdAutopreencher>
                <option value="">Selecione...</option>
                @foreach (var iLtPeriodo in BsnPeriodoLiterais.ListarTodos())
                {
                    <option value=@(iLtPeriodo.Id)>@iLtPeriodo.Nome</option>
                }
            </select>
        </div>
        <div class='d-flex flex-row align-items-center col-sm-6 col-md-4 px-2 pt-3'>
            <HrhCheckbox @bind-EChecado=@ePesquisaPorData EDesabilitado=@false />
            <label class='ps-2'>É pesquisa por Data Específica?</label>
        </div>
        <div class='d-flex flex-row align-items-center col-sm-6 col-md-4 px-2 pt-3'>
            <HrhCheckbox @bind-EChecado=@ePesquisaPorIntervalo EDesabilitado=@false />
            <label class='ps-2'>É pesquisa por Intervalo?</label>
        </div>
    </div>
    <div class='row g-0 w-100 d-flex'>
        @if (ePesquisaPorData)
        {
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>@(ePesquisaPorIntervalo ? "Data Início" : "Data")</label>
                <input type='date' @bind="dataInicio" />
            </div>
            @if (ePesquisaPorIntervalo)
            {
                <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                    <label>Data Fim</label>
                    <input type='date' @bind="dataFim" />
                </div>
            }
        }
        else
        {
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>@(ePesquisaPorIntervalo ? "Mês Início" : "Mês")</label>
                <select @bind="idMesInicio">
                    <option value="">Selecione...</option>
                    @foreach (var iLtMes in BsnMesLiterais.ListarTodos())
                    {
                        <option value=@(iLtMes.Id)>@iLtMes.Sigla</option>
                    }
                </select>
            </div>
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>@(ePesquisaPorIntervalo ? "Ano Início" : "Ano")</label>
                <select @bind="idAnoInicio">
                    <option value="">Selecione...</option>
                    @foreach (var iAno in listaAnos)
                    {
                        <option value=@iAno>@iAno</option>
                    }
                </select>
            </div>
        }
    </div>
    @if (!ePesquisaPorData && ePesquisaPorIntervalo)
    {
        <div class='row g-0 w-100 d-flex'>
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>Mês Fim</label>
                <select @bind="idMesFim">
                    <option value="">Selecione...</option>
                    @foreach (var iLtMes in BsnMesLiterais.ListarTodos())
                    {
                        <option value=@(iLtMes.Id)>@iLtMes.Sigla</option>
                    }
                </select>
            </div>
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>Ano Fim</label>
                <select @bind="idAnoFim">
                    <option value="">Selecione...</option>
                    @foreach (var iAno in listaAnos)
                    {
                        <option value=@iAno>@iAno</option>
                    }
                </select>
            </div>
        </div>
    }
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 px-2 pt-3'>
            <button class='p-2 border-non-important border-2 border-hrh-1 hrh-bg-inherit-non-important h-100 text-hrh-1-non-important onhover-bg-hrh-1-non-important onhover-text-hrh-fundo-non-important' @onclick="SubmitPesquisarAsync" >
                <span class='oi oi-search pe-2'></span>Pesquisar
            </button>
        </div>
    </div>
    <h1 class='pt-3'>Banco Horas</h1>
    <div class='w-100 mt-3 text-hrh-fundo'>
        @if (relacoesViewDiaTotal.Any())
        {
            <RadzenDataGrid AllowColumnResize="true" AllowSorting="true" PageSize="10" AllowPaging="true"
                Data="@relacoesViewDiaTotal" TItem="RelacaoDoDiaTrabViewModel" AllowGrouping="true" GroupPanelText="Arraste um cabeçalho para esta área para agrupar">
                <Columns>
                    <RadzenDataGridColumn TItem="RelacaoDoDiaTrabViewModel" Property="NomeColaborador" Title="Colaborador" Frozen="true" Width="200px" />
                    <RadzenDataGridColumn TItem="RelacaoDoDiaTrabViewModel" Property="HorasView" Title="Horas" Width="200px" />
                    <RadzenDataGridColumn TItem="RelacaoDoDiaTrabViewModel" Property="DiaView" Title="Dia" Width="100px" />
                </Columns>
            </RadzenDataGrid>
        }
        else
        {
            <div>@Message.PesquisaNaoEncontrouRelacao</div>
        }
    </div>
    <h1 class='pt-3'>Presenças</h1>
    <div class='w-100 mt-3 text-hrh-fundo'>
        @if (relacoesViewPresenca.Any())
        {
            <RadzenDataGrid AllowColumnResize="true" AllowSorting="true" PageSize="10" AllowPaging="true"
                Data="@relacoesViewPresenca" TItem="BsnRelacaoDePresenca" AllowGrouping="true" GroupPanelText="Arraste um cabeçalho para esta área para agrupar">
                <Columns>
                    <RadzenDataGridColumn TItem="BsnRelacaoDePresenca" Property="NomeColaborador" Title="Colaborador" Frozen="true" Width="200px" />
                    <RadzenDataGridColumn TItem="BsnRelacaoDePresenca" Property="EventoView" Title="Evento" Width="200px" />
                    <RadzenDataGridColumn TItem="BsnRelacaoDePresenca" Property="HoraView" Title="Hora" Width="100px" />
                    <RadzenDataGridColumn TItem="BsnRelacaoDePresenca" Property="DiaView" Title="Dia" Width="100px" />
                </Columns>
            </RadzenDataGrid>

        }
        else
        {
            <div>@Message.PesquisaNaoEncontrouRelacao</div>
        }
    </div>
    <div class='d-flex flex-column col-12 px-2 pt-3'>
        <button class='p-2 border-non-important border-2 border-hrh-1 hrh-bg-inherit-non-important h-100 text-hrh-1-non-important onhover-bg-hrh-1-non-important onhover-text-hrh-fundo-non-important' @onclick="IrPresencaNova" >
            <span class='oi oi-plus pe-2'></span>Nova Presença
        </button>
    </div>
</div>

@code {
    [CascadingParameter(Name = "SetRefColaboradorLogadoAsync")]
    public EventCallback<BsnColaboradorLogado> SetRefColaboradorLogadoAsync { get; set; }
    [CascadingParameter(Name = "SairEFecharAsync")]
    public EventCallback SairEFecharAsync { get; set; }
    [CascadingParameter(Name = "SetMensagemDeAlerta")]
    public EventCallback<DetalhesMensagemDeAlertaViewModel> SetMensagemDeAlerta { get; set; }
    [CascadingParameter(Name = "SetMensagemConfirmar")]
    public EventCallback<DetalhesMensagemConfirmarViewModel> SetMensagemConfirmar { get; set; }
    [CascadingParameter(Name = "LockUI")]
    public EventCallback<string> LockUI { get; set; }
    [CascadingParameter(Name = "UnlockUI")]
    public EventCallback<string> UnlockUI { get; set; }    
    private string? nomeColaborador;
    private string? idEvento;
    private int? minimoMinutos;
    private int? maximoMinutos;
    private bool ePesquisaPorData;
    private bool ePesquisaPorIntervalo;
    private DateTime? dataInicio;
    private DateTime? dataFim;
    private string? idAutopreencher;
    private string? idMesInicio;
    private string? idAnoInicio;
    private string? idMesFim;
    private string? idAnoFim;
    
    private List<int> listaAnos = HrhListaSuporteStrategy.ListarEsteEUltimos20Anos();
    private string idPesquisar = MongoId.NewMongoId;
    @* private List<BsnRelacaoDeHorasDoColaborador> relacoes = new List<BsnRelacaoDeHorasDoColaborador>();
    private List<BsnRelacaoDePresenca> relacoesPresencas = new List<BsnRelacaoDePresenca>(); *@
    private List<BsnRelacaoDoDiaTrabalhado> relacoesDiaTotal = new List<BsnRelacaoDoDiaTrabalhado>();
    private List<RelacaoDoDiaTrabViewModel> relacoesViewDiaTotal = new List<RelacaoDoDiaTrabViewModel>();
    private List<BsnRelacaoDePresenca> relacoesViewPresenca = new List<BsnRelacaoDePresenca>();

    private bool deveCarregarDados = false;
    protected override void OnInitialized()
    {
        deveCarregarDados = true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (deveCarregarDados)
        {
            nomeColaborador = "";
            idEvento = "";
            minimoMinutos = null;
            maximoMinutos = null;
            ePesquisaPorData = false;
            dataInicio = null;
            dataFim = null;
            idAutopreencher = "";
            idMesInicio = "";
            idMesFim = "";
            idAnoInicio = "";
            idAnoFim = "";
            await CarregarRelacoesAsync(BsnPesquisaDePresencaPorMes.SemFiltro);
            deveCarregarDados = false;
            StateHasChanged();
        }
    }

    public async Task CarregarRelacoesAsync(IBsnPesquisaDePresenca pesquisa)
    {
        var resultRelacoes = await PresencaBusiness.PesquisarAsync(pesquisa, TimeZoneInfo.Local);
        if (resultRelacoes.EstaOk)
        {
            @* relacoes = resultRelacoes.Resultado; *@
            relacoesDiaTotal = resultRelacoes.Resultado.SelectMany(x => x.DiasTrabalhados).ToList();
            relacoesViewDiaTotal = relacoesDiaTotal.Select(x => RelacaoDoDiaTrabViewModel.FromBsnRelacao(x)).ToList();
            relacoesViewPresenca = relacoesDiaTotal.SelectMany(x => x.PresencasDoDia).ToList();
            @* relacoesPresencas = relacoesDiaTotal.SelectMany(x => x.PresencasDoDia).ToList(); *@
        }
        else
        {
            await SetMensagemDeAlerta.InvokeAsync(new DetalhesMensagemDeAlertaViewModel
            {
                Titulo = Message.TituloAtencao,
                NomeDaClasseDeCssDoIcone = Message.IconeErro,
                Mensagem = resultRelacoes.Mensagem
            });
        }
    }

    public void OnChangeIdAutopreencher(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }
        var nextIdAutopreencherAsString = args.Value.ToString();
        if (string.IsNullOrEmpty(nextIdAutopreencherAsString))
        {
            return;
        }
        HandleChangeIdAutoPreencher(nextIdAutopreencherAsString);
    }

    public void HandleChangeIdAutoPreencher(string nextIdAutopreencher)
    {
        var periodoAuto = BsnPeriodoLiterais.GetByIdOrDefault(nextIdAutopreencher);
        if (periodoAuto == null)
        {
            idAutopreencher = nextIdAutopreencher;
            StateHasChanged();
            return;
        }
        if (periodoAuto.PeriodoArgs.EPorMes)
        {
            var periodoArgsMes = (BsnPeriodoPorMesArgs)periodoAuto.PeriodoArgs;
            ePesquisaPorData = false;
            ePesquisaPorIntervalo = false;
            idMesInicio = periodoArgsMes.IdMes;
            idAnoInicio = periodoArgsMes.IdAno;
            idAutopreencher = nextIdAutopreencher;
            StateHasChanged();
            return;
        }
        var periodoArgs = (BsnPeriodoPorDataArgs)periodoAuto.PeriodoArgs;
        ePesquisaPorData = true;
        ePesquisaPorIntervalo = true;
        dataInicio = periodoArgs.DataInicioInclusive;
        dataFim = periodoArgs.DataFimInclusive;
        idAutopreencher = nextIdAutopreencher;
        StateHasChanged();
        return;
    }

    public async Task SubmitPesquisarAsync()
    {
        await LockUI.InvokeAsync(idPesquisar);
        await Task.Yield();
        IBsnPesquisaDePresenca pesquisaSubmit;
        if (ePesquisaPorData)
        {
            var pesquisaEspecifica = new BsnPesquisaDePresencaPorData
            {
                NomeColaborador = nomeColaborador,
                IdEvento = idEvento,
                MinutosTrabalhadosMinimo = minimoMinutos,
                MinutosTrabalhadosMaximo = maximoMinutos,
                DataInicioInclusive = dataInicio,
                DataFimInclusive = dataFim
            };
            if (!ePesquisaPorIntervalo)
            {
                pesquisaEspecifica.DataFimInclusive = dataInicio;
            }
            pesquisaSubmit = pesquisaEspecifica;
        }
        else
        {
            var pesquisaEspecifica = new BsnPesquisaDePresencaPorMes
            {
                NomeColaborador = nomeColaborador,
                IdEvento = idEvento,
                MinutosTrabalhadosMinimo = minimoMinutos,
                MinutosTrabalhadosMaximo = maximoMinutos,
                IdMesInicioInclusive = idMesInicio,
                IdAnoInicioInclusive = idAnoInicio,
                IdMesFimInclusive = idMesFim,
                IdAnoFimInclusive = idAnoFim
            };
            if (!ePesquisaPorIntervalo)
            {
                pesquisaEspecifica.IdMesFimInclusive = idMesFim;
                pesquisaEspecifica.IdAnoFimInclusive = idAnoFim;
            }
            pesquisaSubmit = pesquisaEspecifica;
        }
        await CarregarRelacoesAsync(pesquisaSubmit);
        await UnlockUI.InvokeAsync(idPesquisar);
    }

    @* public async Task AbrirConfirmarEstaAtivoColaboradorAsync(BsnArgsPromptEstaAtivoColaborador args)
    {
        await SetMensagemConfirmar.InvokeAsync(new DetalhesMensagemConfirmarViewModel
        {
            Titulo = Message.TituloAtencao,
            NomeDaClasseDeCssDoIcone = Message.IconePergunta,
            Mensagem = args.EstaAtivoAtual ? Message.TemCertezaAtivar : Message.TemCertezaInativar,
            AcaoAposConfirmar = EventCallback.Factory.Create(this, async () => await AtivarInativarColaboradorAsync(args))
        });
    } *@

    @* public async Task AtivarInativarColaboradorAsync(BsnArgsPromptEstaAtivoColaborador args)
    {
        await LockUI.InvokeAsync(idAtivarInativar);
        await Task.Yield();
        var resultAtivarOuInativar = args.EstaAtivoAtual ? await ColaboradorBusiness.AtivarAsync(args.Id) : await ColaboradorBusiness.InativarAsync(args.Id);
        await SetMensagemDeAlerta.InvokeAsync(new DetalhesMensagemDeAlertaViewModel
        {
            Titulo = Message.TituloAtencao,
            NomeDaClasseDeCssDoIcone = resultAtivarOuInativar.EstaOk ? Message.IconeSucesso : Message.IconeErro,
            Mensagem = resultAtivarOuInativar.Mensagem,
            AcaoAposFechar = resultAtivarOuInativar.EstaOk ? EventCallback.Factory.Create(this, () => UriHelper.NavigateTo("/colaborador", true)) : null
        });
        await UnlockUI.InvokeAsync(idAtivarInativar);
    } *@

    private void IrPresencaNova()
    {
        UriHelper.NavigateTo("/presenca/nova", true);
    }

    private void ClickSolicitarNovoAcesso()
    {
        UriHelper.NavigateTo("", true);
    }

    private void ClickSolicitarExclusao()
    {
        UriHelper.NavigateTo("", true);
    }

    public void NavegarParaManterAcessos(string idColaborador, bool eVisualizacao)
    {
        UriHelper.NavigateTo($"/colaborador/manterAcessos?id=" + idColaborador + "&eVisualizacao=" + (eVisualizacao ? "S" : "N"), true);
    }
}
