@page "/presenca"

@using Domain.Design.Patterns.Strategy
@using Domain.Models
@using Domain.Interfaces.Accessor
@using Domain.Interfaces.Repository
@using Domain.Interfaces.Business
@using Domain.Models.Bsn
@using Domain.Models.Bsn.Args
@using Domain.Models.Bsn.Autorizacao
@using Domain.Models.Bsn.Colaborador
@using Domain.Models.Bsn.Funcionalidade
@using Domain.Models.ViewModels
@using Domain.Interfaces.Configuration

@using Microsoft.AspNetCore.Mvc.Rendering

@inject IColaboradorLogadoAccessor ColaboradorLogadoAccessor
@inject IAutorizacaoBusiness AutorizacaoBusiness
@inject IColaboradorBusiness ColaboradorBusiness
@inject IAppConfiguration AppConfiguration
@inject NavigationManager UriHelper

<PageTitle>Presença</PageTitle>

<div class='d-flex flex-column'>
    <h1>Presença Index</h1>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Nome Colaborador</label>
            <input type='text' @bind="nome" />
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Login Colaborador</label>
            <input type='text' @bind="login" />
        </div>
        <div class='d-flex flex-column col-12 px-2 pt-3'>
            <button class='p-2 border-non-important border-2 border-hrh-1 hrh-bg-inherit-non-important h-100 text-hrh-1-non-important onhover-bg-hrh-1-non-important onhover-text-hrh-fundo-non-important' @onclick="SubmitPesquisarAsync" >
                <span class='oi oi-search pe-2'></span>Pesquisar
            </button>
        </div>
    </div>
    <h1 class='pt-3'>Colaboradores</h1>
    <div class='row g-0 w-100 d-flex mt-3'>
        @if (relacoes.Any())
        {
            <RadzenDataGrid AllowColumnResize="true" AllowSorting="true" PageSize="5" AllowPaging="true"
                Data="@relacoes" TItem="BsnRelacaoDeColaborador">
                <Columns>
                    <RadzenDataGridColumn TItem="BsnRelacaoDeColaborador" Property="Nome" Title="Nome" Frozen="true" Width="200px" />
                    <RadzenDataGridColumn TItem="BsnRelacaoDeColaborador" Property="Login" Title="Login" Width="150px"/>
                    @if (ColaboradorLogadoAccessor.ColaboradorLogado.TemPermissaoPara(BsnFuncionalidadeLiterais.ListarAcesso) || 
                        ColaboradorLogadoAccessor.ColaboradorLogado.TemPermissaoPara(BsnFuncionalidadeLiterais.AlterarAcesso))
                    {
                        <RadzenDataGridColumn TItem="BsnRelacaoDeColaborador" Title="Acessos" Width="150px">
                            <Template Context="data">
                                @if (ColaboradorLogadoAccessor.ColaboradorLogado.TemPermissaoPara(BsnFuncionalidadeLiterais.ListarAcesso))
                                {
                                    <button class='p-2 me-2 border-non-important border-2 border-hrh-1 hrh-bg-inherit-non-important text-hrh-1-non-important onhover-bg-hrh-1-non-important onhover-text-hrh-texto-non-important' @onclick=@(() => NavegarParaManterAcessos(data.Id, true)) >
                                        <span class='oi oi-eye px-1'></span>
                                    </button>
                                }
                                @if (ColaboradorLogadoAccessor.ColaboradorLogado.TemPermissaoPara(BsnFuncionalidadeLiterais.AlterarAcesso) && data.Id != ColaboradorLogadoAccessor.ColaboradorLogado.Id && AppConfiguration.ColaboradorAdmin.Login != data.Login)
                                {
                                    <button class='p-2 border-non-important border-2 border-hrh-1 hrh-bg-inherit-non-important text-hrh-1-non-important onhover-bg-hrh-1-non-important onhover-text-hrh-texto-non-important' @onclick=@(() => NavegarParaManterAcessos(data.Id, false)) >
                                        <span class='oi oi-pencil px-1'></span>
                                    </button>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    <RadzenDataGridColumn TItem="BsnRelacaoDeColaborador" Property="EstaAtivo" Title="Ativo" Width="50px">
                        <Template Context="data">
                            <HrhCheckbox EChecado=@data.EstaAtivo
                                EChecadoChanged=@(async () => await AbrirConfirmarEstaAtivoColaboradorAsync(data.ArgsPromptEstaAtivo))
                                EDesabilitado=@(!ColaboradorLogadoAccessor.ColaboradorLogado.TemPermissaoPara(BsnFuncionalidadeLiterais.AtivarColaborador) || data.Id == ColaboradorLogadoAccessor.ColaboradorLogado.Id) />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
        else
        {
            <div>@Message.PesquisaNaoEncontrouRelacao</div>
        }
    </div>
</div>

@code {
    [CascadingParameter(Name = "SetRefColaboradorLogadoAsync")]
    public EventCallback<BsnColaboradorLogado> SetRefColaboradorLogadoAsync { get; set; }
    [CascadingParameter(Name = "SairEFecharAsync")]
    public EventCallback SairEFecharAsync { get; set; }
    [CascadingParameter(Name = "SetMensagemDeAlerta")]
    public EventCallback<DetalhesMensagemDeAlertaViewModel> SetMensagemDeAlerta { get; set; }
    [CascadingParameter(Name = "SetMensagemConfirmar")]
    public EventCallback<DetalhesMensagemConfirmarViewModel> SetMensagemConfirmar { get; set; }
    [CascadingParameter(Name = "LockUI")]
    public EventCallback<string> LockUI { get; set; }
    [CascadingParameter(Name = "UnlockUI")]
    public EventCallback<string> UnlockUI { get; set; }    
    private string? nome;
    private string? login;
    private string? estaAtivoSelecionado;
    private string idPesquisar = MongoId.NewMongoId;
    private string idAtivarInativar = MongoId.NewMongoId;
    private List<BsnRelacaoDeColaborador> relacoes = new List<BsnRelacaoDeColaborador>();

    private bool deveCarregarDados = false;
    protected override void OnInitialized()
    {
        deveCarregarDados = true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (deveCarregarDados)
        {
            nome = "";
            login = "";
            estaAtivoSelecionado = HrhListaSuporteStrategy.BoolAnulavelParaValueDeOption(null);
            await CarregarRelacoesAsync(BsnPesquisaDeColaborador.SemFiltro);
            deveCarregarDados = false;
            StateHasChanged();
        }
    }

    public async Task CarregarRelacoesAsync(BsnPesquisaDeColaborador pesquisa)
    {
        var resultRelacoes = await ColaboradorBusiness.PesquisarAsync(pesquisa);
        if (resultRelacoes.EstaOk)
        {
            relacoes = resultRelacoes.Resultado;
        }
        else
        {
            relacoes = new List<BsnRelacaoDeColaborador>();
            await SetMensagemDeAlerta.InvokeAsync(new DetalhesMensagemDeAlertaViewModel
            {
                Titulo = Message.TituloAtencao,
                NomeDaClasseDeCssDoIcone = Message.IconeErro,
                Mensagem = resultRelacoes.Mensagem
            });
        }
    }

    public async Task SubmitPesquisarAsync()
    {
        await LockUI.InvokeAsync(idPesquisar);
        await Task.Yield();
        await CarregarRelacoesAsync(new BsnPesquisaDeColaborador
        {
            Nome = nome ?? "",
            Login = login ?? "",
            EstaAtivo = HrhListaSuporteStrategy.ValueDeOptionParaBoolAnulavel(estaAtivoSelecionado)
        });
        await UnlockUI.InvokeAsync(idPesquisar);
    }

    public async Task AbrirConfirmarEstaAtivoColaboradorAsync(BsnArgsPromptEstaAtivoColaborador args)
    {
        await SetMensagemConfirmar.InvokeAsync(new DetalhesMensagemConfirmarViewModel
        {
            Titulo = Message.TituloAtencao,
            NomeDaClasseDeCssDoIcone = Message.IconePergunta,
            Mensagem = args.EstaAtivoAtual ? Message.TemCertezaAtivar : Message.TemCertezaInativar,
            AcaoAposConfirmar = EventCallback.Factory.Create(this, async () => await AtivarInativarColaboradorAsync(args))
        });
    }

    public async Task AtivarInativarColaboradorAsync(BsnArgsPromptEstaAtivoColaborador args)
    {
        await LockUI.InvokeAsync(idAtivarInativar);
        await Task.Yield();
        var resultAtivarOuInativar = args.EstaAtivoAtual ? await ColaboradorBusiness.AtivarAsync(args.Id) : await ColaboradorBusiness.InativarAsync(args.Id);
        await SetMensagemDeAlerta.InvokeAsync(new DetalhesMensagemDeAlertaViewModel
        {
            Titulo = Message.TituloAtencao,
            NomeDaClasseDeCssDoIcone = resultAtivarOuInativar.EstaOk ? Message.IconeSucesso : Message.IconeErro,
            Mensagem = resultAtivarOuInativar.Mensagem,
            AcaoAposFechar = resultAtivarOuInativar.EstaOk ? EventCallback.Factory.Create(this, () => UriHelper.NavigateTo("/colaborador", true)) : null
        });
        await UnlockUI.InvokeAsync(idAtivarInativar);
    }

    private void ClickSolicitarNovoAcesso()
    {
        UriHelper.NavigateTo("", true);
    }

    private void ClickSolicitarExclusao()
    {
        UriHelper.NavigateTo("", true);
    }

    public void NavegarParaManterAcessos(string idColaborador, bool eVisualizacao)
    {
        UriHelper.NavigateTo($"/colaborador/manterAcessos?id=" + idColaborador + "&eVisualizacao=" + (eVisualizacao ? "S" : "N"), true);
    }
}
