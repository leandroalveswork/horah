@page "/logs"

@using Domain.Models
@using Domain.Models.Bsn.Autorizacao
@using Domain.Models.Bsn.Logs
@using Domain.Models.ViewModels
@using Domain.Interfaces.Business

@inject ILogsBusiness LogsBusiness
@inject NavigationManager UriHelper

<PageTitle>Logs</PageTitle>

<div class='d-flex flex-column'>
    <h1>Filtros</h1>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Nome Colaborador</label>
            <input type='text' @bind="nomeColaborador" />
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Operação</label>
            <select @bind="idOperacao">
                <option value="">Selecione...</option>
                @foreach (var iLtOp in BsnOperacaoLiterais.ListarTodos())
                {
                    <option value=@(iLtOp.Id)>@iLtOp.Nome</option>
                }
            </select>
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Tabela</label>
            <select @bind="idTabela">
                <option value="">Selecione...</option>
                @foreach (var iLtTabela in BsnTabelaLiterais.ListarTodos())
                {
                    <option value=@(iLtTabela.Id)>@iLtTabela.Nome</option>
                }
            </select>
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Id Entidade</label>
            <input type='text' @bind="idEntidade" />
        </div>
    </div>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-row align-items-center col-sm-6 col-md-4 px-2 pt-3'>
            <HrhCheckbox @bind-EChecado=@ePesquisaPorIntervalo EDesabilitado=@false />
            <label class='ps-2'>É pesquisa por Intervalo?</label>
        </div>
    </div>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>@(ePesquisaPorIntervalo ? "Data Início" : "Data")</label>
            <input type='date' @bind="dataInicio" />
        </div>
        @if (ePesquisaPorIntervalo)
        {
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>Data Fim</label>
                <input type='date' @bind="dataFim" />
            </div>
        }
    </div>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 px-2 pt-3'>
            <button class='p-2 border-non-important border-2 border-hrh-1 hrh-bg-inherit-non-important h-100 text-hrh-1-non-important onhover-bg-hrh-1-non-important onhover-text-hrh-fundo-non-important' @onclick="SubmitPesquisarAsync" >
                <span class='oi oi-search pe-2'></span>Pesquisar
            </button>
        </div>
    </div>
    <h1 class='pt-3'>Logs</h1>
    <div class='w-100 mt-3 text-hrh-fundo'>
        @if (relacoes.Any())
        {
            <RadzenDataGrid AllowColumnResize="true" AllowSorting="true" PageSize="10" AllowPaging="true"
                Data="@relacoes" TItem="BsnRelacaoDeLog">
                <Columns>
                    <RadzenDataGridColumn TItem="BsnRelacaoDeLog" Property="NomeColaborador" Title="Colaborador" Frozen="true" Width="200px" />
                    <RadzenDataGridColumn TItem="BsnRelacaoDeLog" Title="Operação" Width="200px" >
                        <Template Context="data">
                            <span>@(BsnOperacaoLiterais.GetById(data.IdOperacao).Nome)</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="BsnRelacaoDeLog" Title="Tabela" Width="200px" >
                        <Template Context="data">
                            <span>@(BsnTabelaLiterais.GetById(data.IdTabela).Nome)</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="BsnRelacaoDeLog" Property="IdEntidade" Title="Id Entidade" Frozen="true" Width="200px" />
                    <RadzenDataGridColumn TItem="BsnRelacaoDeLog" Property="DiaView" Title="Dia" Width="100px" />
                    <RadzenDataGridColumn TItem="BsnRelacaoDeLog" Title="Dados" Width="100px">
                        <Template Context="data">
                            <button class='p-2 me-2 border-non-important border-2 border-hrh-1 hrh-bg-inherit-non-important text-hrh-1-non-important onhover-bg-hrh-1-non-important onhover-text-hrh-texto-non-important' @onclick=@(() => HandleNavegarParaDetalhesLogs(data.Id, data.IdOperacao)) >
                                <span class='oi oi-eye px-1'></span>
                            </button>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="BsnRelacaoDeLog" Title="Hora" Width="200px" >
                        <Template Context="data">
                            <span>@(data.HoraOperacao.ToString("HH:mm:ss - dd/MM/yyyy"))</span>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
        else
        {
            <div>@Message.PesquisaNaoEncontrouRelacao</div>
        }
    </div>
</div>


@code {
    [CascadingParameter(Name = "SetRefColaboradorLogadoAsync")]
    public EventCallback<BsnColaboradorLogado> SetRefColaboradorLogadoAsync { get; set; }
    [CascadingParameter(Name = "SairEFecharAsync")]
    public EventCallback SairEFecharAsync { get; set; }
    [CascadingParameter(Name = "SetMensagemDeAlerta")]
    public EventCallback<DetalhesMensagemDeAlertaViewModel> SetMensagemDeAlerta { get; set; }
    [CascadingParameter(Name = "SetMensagemConfirmar")]
    public EventCallback<DetalhesMensagemConfirmarViewModel> SetMensagemConfirmar { get; set; }
    [CascadingParameter(Name = "LockUI")]
    public EventCallback<string> LockUI { get; set; }
    [CascadingParameter(Name = "UnlockUI")]
    public EventCallback<string> UnlockUI { get; set; }
    [CascadingParameter(Name = "VoltarAsync")]
    public EventCallback VoltarAsync { get; set; }
    private string? nomeColaborador;
    private string? idOperacao;
    private string? idTabela;
    private string? idEntidade;
    private bool ePesquisaPorIntervalo;
    private DateTime? dataInicio;
    private DateTime? dataFim;

    private string idPesquisar = MongoId.NewMongoId;
    private List<BsnRelacaoDeLog> relacoes = new List<BsnRelacaoDeLog>();


    private bool deveCarregarDados = false;
    protected override void OnInitialized()
    {
        deveCarregarDados = true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (deveCarregarDados)
        {
            nomeColaborador = "";
            idOperacao = "";
            idTabela = "";
            idEntidade = "";
            ePesquisaPorIntervalo = false;
            dataInicio = null;
            dataFim = null;
            await CarregarRelacoesAsync(BsnPesquisaDeLogs.SemFiltro);
            deveCarregarDados = false;
            StateHasChanged();
        }
    }
    
    public async Task CarregarRelacoesAsync(BsnPesquisaDeLogs pesquisa)
    {
        var resultRelacoes = await LogsBusiness.PesquisarAsync(pesquisa, TimeZoneInfo.Local);
        if (resultRelacoes.EstaOk)
        {
            relacoes = resultRelacoes.Resultado;
        }
        else
        {
            await SetMensagemDeAlerta.InvokeAsync(new DetalhesMensagemDeAlertaViewModel
            {
                Titulo = Message.TituloAtencao,
                NomeDaClasseDeCssDoIcone = Message.IconeErro,
                Mensagem = resultRelacoes.Mensagem
            });
        }
    }

    public async Task SubmitPesquisarAsync()
    {
        await LockUI.InvokeAsync(idPesquisar);
        await Task.Yield();
        var pesquisaSubmit = new BsnPesquisaDeLogs
        {
            NomeColaborador = nomeColaborador,
            IdOperacao = idOperacao,
            IdTabela = idTabela,
            IdEntidade = idEntidade,
            DataOperacaoInicio = dataInicio,
            DataOperacaoFim = dataFim
        };
        if (!ePesquisaPorIntervalo)
        {
            pesquisaSubmit.DataOperacaoFim = dataInicio;
        }
        await CarregarRelacoesAsync(pesquisaSubmit);
        await UnlockUI.InvokeAsync(idPesquisar);
    }
    
    public void HandleNavegarParaDetalhesLogs(string idOperacao, string idRegistro)
    {
        UriHelper.NavigateTo($"/logs/detalhes?idOperacao=" + idOperacao + "&idRegistro=" + idRegistro, true);
    }
}