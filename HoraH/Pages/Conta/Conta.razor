@page "/conta"
@using Domain.Models
@using Domain.Interfaces.Accessor
@using Domain.Interfaces.Repository
@using Domain.Interfaces.Business
@using Domain.Models.Bsn
@using Domain.Models.Bsn.Autorizacao
@using Domain.Models.ViewModels
@inject IColaboradorLogadoAccessor ColaboradorLogadoAccessor
@inject IFuncionalidadeRepository FuncionalidadeRepository
@inject IAutorizacaoBusiness AutorizacaoBusiness
@inject NavigationManager UriHelper

<PageTitle>Conta</PageTitle>

<div class='d-flex flex-column align-items-center'>
    <h1>Conta</h1>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Nome</label>
            <input type='text' @bind="nome" />
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Login</label>
            <input type='text' @bind="login" />
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Senha</label>
            <input type='password' @bind="senha" />
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Confirmar Senha</label>
            <input type='password' @bind="confirmarSenha" />
        </div>
        <div class='d-flex flex-column col-12 px-2 pt-3'>
            <button class='p-2 border-non-important border-2 border-success hrh-bg-inherit h-100 text-success-non-important onhover-bg-bs-success onhover-text-hrh-fundo' @onclick="SubmitAlterarAsync" >
                <span class='oi oi-check pe-2'></span>Salvar
            </button>
        </div>
    </div>
    <h1 class='pt-3'>Acessos</h1>
    <div class='row g-0 w-100 d-flex'>
        @foreach (var acesso in acessos)
        {
            <div class='d-flex flex-row col-12 col-md-6 px-2 pt-3'>
                <input type='checkbox' checked="@acesso.EstaPermitido" disabled readonly />
                <label class='ps-2'>@acesso.NomeFuncionalidade</label>
            </div>
        }
        
        <div class='d-flex flex-column col-12 px-2 pt-3'>
            <button class='p-2 border-non-important border-2 border-hrh-1-important hrh-bg-inherit h-100 text-hrh-1 onhover-bg-hrh-1 onhover-text-hrh-fundo' @onclick="ClickSolicitarNovoAcesso" >
                <span class='oi oi-plus pe-2'></span>Solicitar novo Acesso
            </button>
        </div>
        
        <div class='d-flex flex-column col-12 px-2 pt-3'>
            <button class='p-2 border-non-important border-2 border-danger hrh-bg-inherit h-100 text-danger-non-important onhover-bg-bs-danger onhover-text-hrh-fundo' @onclick="ClickSolicitarExclusao" >
                <span class='oi oi-x pe-2'></span>Solicitar Exclus√£o Programada
            </button>
        </div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "SetRefColaboradorAsync")]
    public EventCallback<BsnColaboradorLogado> SetRefColaboradorLogadoAsync { get; set; }
    [CascadingParameter(Name = "SetMensagemDeAlerta")]
    public EventCallback<DetalhesMensagemDeAlertaViewModel> SetMensagemDeAlerta { get; set; }
    [CascadingParameter(Name = "LockUI")]
    public EventCallback<string> LockUI { get; set; }
    [CascadingParameter(Name = "UnlockUI")]
    public EventCallback<string> UnlockUI { get; set; }
    private string? nome;
    private string? login;
    private string? senha;
    private string? confirmarSenha;
    private List<BsnAcessoDoColaboradorLogado> acessos = new List<BsnAcessoDoColaboradorLogado>();
    private string idAlterarDados = MongoId.NewMongoId;
    private bool deveCarregarDados = false;

    protected override void OnInitialized()
    {
        deveCarregarDados = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (deveCarregarDados)
        {
            nome = ColaboradorLogadoAccessor.ColaboradorLogado.Nome;
            login = ColaboradorLogadoAccessor.ColaboradorLogado.Login;
            senha = "";
            confirmarSenha = "";
            acessos = ColaboradorLogadoAccessor.ColaboradorLogado.Acessos;
            deveCarregarDados = false;
            StateHasChanged();
        }
    }

    public async Task SubmitAlterarAsync()
    {
        await LockUI.InvokeAsync(idAlterarDados);
        await Task.Yield();
        var bsnAlterarConta = new BsnAlterarConta()
        {
            Nome = nome ?? "",
            Login = login ?? "",
            Senha = senha ?? "",
            ConfirmarSenha = confirmarSenha ?? ""
        };
        var result = await AutorizacaoBusiness.AlterarColaboradorAsync(bsnAlterarConta);
        if (!result.EstaOk)
        {
            var mensagemDeAlerta = new DetalhesMensagemDeAlertaViewModel()
            {
                Titulo = Message.TituloAtencao,
                NomeDaClasseDeCssDoIcone = Message.IconeErro,
                Mensagem = result.Mensagem
            };
            await SetMensagemDeAlerta.InvokeAsync(mensagemDeAlerta);
            await UnlockUI.InvokeAsync(idAlterarDados);
            return;
        }
        await SetRefColaboradorLogadoAsync.InvokeAsync(ColaboradorLogadoAccessor.ColaboradorLogado);
        var mensagemDeAlertaOk = new DetalhesMensagemDeAlertaViewModel()
        {
            Titulo = Message.TituloAtencao,
            NomeDaClasseDeCssDoIcone = Message.IconeSucesso,
            Mensagem = result.Mensagem,
            DeveRedirecionar = true,
            LinkRedirecionar = "/conta"
        };
        await SetMensagemDeAlerta.InvokeAsync(mensagemDeAlertaOk);
        await UnlockUI.InvokeAsync(idAlterarDados);
    }

    private void ClickSolicitarNovoAcesso()
    {
        UriHelper.NavigateTo("", true);
    }

    private void ClickSolicitarExclusao()
    {
        UriHelper.NavigateTo("", true);
    }
}
