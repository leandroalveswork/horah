@page "/colaborador/manterAcessos"
@using Domain.Design.Patterns.Strategy
@using Domain.Models
@using Domain.Interfaces.Accessor
@using Domain.Interfaces.Repository
@using Domain.Interfaces.Business
@using Domain.Models.Bsn
@using Domain.Models.Bsn.Autorizacao
@using Domain.Models.Bsn.Funcionalidade
@using Domain.Models.ViewModels

@inject IColaboradorLogadoAccessor ColaboradorLogadoAccessor
@inject IAutorizacaoBusiness AutorizacaoBusiness
@inject IColaboradorBusiness ColaboradorBusiness
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime

<PageTitle>Manter Acessos</PageTitle>

<div class='d-flex flex-column align-items-center'>
    <h1>Alterar Acessos</h1>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Colaborador</label>
            <input type='text' @bind="nome" disabled />
        </div>
    </div>
    <div class='row g-0 w-100 d-flex'>
        @foreach (var acesso in acessos)
        {
            <div class='d-flex flex-row align-items-center col-12 col-md-6 px-2 pt-3'>
                <HrhCheckbox EChecado=@acesso.EstaPermitido EDesabilitado=@(!(ColaboradorLogadoAccessor.ColaboradorLogado.Acessos.Any(x => x.EstaPermitido && x.IdFuncionalidade == BsnFuncionalidadeLiterais.AlterarAcessoId))) />
                <label class='ps-2'>@acesso.Funcionalidade.Nome</label>
            </div>
        }
    </div>
</div>

@code {
    [CascadingParameter(Name = "SetRefColaboradorLogadoAsync")]
    public EventCallback<BsnColaboradorLogado> SetRefColaboradorLogadoAsync { get; set; }
    [CascadingParameter(Name = "SairEFecharAsync")]
    public EventCallback SairEFecharAsync { get; set; }
    [CascadingParameter(Name = "SetMensagemDeAlerta")]
    public EventCallback<DetalhesMensagemDeAlertaViewModel> SetMensagemDeAlerta { get; set; }
    [CascadingParameter(Name = "SetMensagemConfirmar")]
    public EventCallback<DetalhesMensagemConfirmarViewModel> SetMensagemConfirmar { get; set; }
    [CascadingParameter(Name = "LockUI")]
    public EventCallback<string> LockUI { get; set; }
    [CascadingParameter(Name = "UnlockUI")]
    public EventCallback<string> UnlockUI { get; set; }
    private string? nome;
    private string? idColaborador;
    private List<BsnAcesso> acessos = new List<BsnAcesso>();
    private string idAlterarDados = MongoId.NewMongoId;
    private string idInativacao = MongoId.NewMongoId;

    private bool deveCarregarDados = false;
    protected override void OnInitialized()
    {
        deveCarregarDados = true;
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (deveCarregarDados)
        {
            nome = ColaboradorLogadoAccessor.ColaboradorLogado.Nome;
            idColaborador = HrhUriStrategy.PegarParametroAsString(UriHelper, "id");
            Console.WriteLine(idColaborador);
            acessos = ColaboradorLogadoAccessor.ColaboradorLogado.Acessos;
            deveCarregarDados = false;
            StateHasChanged();
        }
    }

    public async Task SubmitAlterarAsync()
    {
        await LockUI.InvokeAsync(idAlterarDados);
        await Task.Yield();
        var bsnAlterarConta = new BsnAlterarConta()
        {
            Nome = nome ?? "",
            Login = login ?? "",
            Senha = senha ?? "",
            ConfirmarSenha = confirmarSenha ?? ""
        };
        var result = await AutorizacaoBusiness.AlterarColaboradorAsync(bsnAlterarConta);
        if (!result.EstaOk)
        {
            var mensagemDeAlerta = new DetalhesMensagemDeAlertaViewModel()
            {
                Titulo = Message.TituloAtencao,
                NomeDaClasseDeCssDoIcone = Message.IconeErro,
                Mensagem = result.Mensagem
            };
            await SetMensagemDeAlerta.InvokeAsync(mensagemDeAlerta);
            await UnlockUI.InvokeAsync(idAlterarDados);
            return;
        }
        await SetRefColaboradorLogadoAsync.InvokeAsync(ColaboradorLogadoAccessor.ColaboradorLogado);
        await SetMensagemDeAlerta.InvokeAsync(new DetalhesMensagemDeAlertaViewModel()
        {
            Titulo = Message.TituloAtencao,
            NomeDaClasseDeCssDoIcone = Message.IconeSucesso,
            Mensagem = result.Mensagem,
            AcaoAposFechar = EventCallback.Factory.Create(this, () => UriHelper.NavigateTo("/conta", true))
        });
        await UnlockUI.InvokeAsync(idAlterarDados);
    }

    private void NavegarParaSolicitarNovoAcesso()
    {
        UriHelper.NavigateTo("", true);
    }

    public async Task PerguntarInativarAsync()
    {
        await SetMensagemConfirmar.InvokeAsync(new DetalhesMensagemConfirmarViewModel
        {
            Titulo = Message.TituloAtencao,
            NomeDaClasseDeCssDoIcone = Message.IconePergunta,
            Mensagem = Message.TemCertezaInativarConta,
            AcaoAposConfirmar = EventCallback.Factory.Create(this, async () => await InativarAsync())
        });
    }

    public async Task InativarAsync()
    {
        await LockUI.InvokeAsync(idInativacao);
        await Task.Yield();
        var resultInativacao = await ColaboradorBusiness.InativarAsync(ColaboradorLogadoAccessor.ColaboradorLogado.Id);
        await SetMensagemDeAlerta.InvokeAsync(new DetalhesMensagemDeAlertaViewModel
        {
            Titulo = Message.TituloAtencao,
            NomeDaClasseDeCssDoIcone = resultInativacao.EstaOk ? Message.IconeSucesso : Message.IconeErro,
            Mensagem = resultInativacao.Mensagem,
            AcaoAposFechar = resultInativacao.EstaOk ? EventCallback.Factory.Create(this, async () => await SairEFecharAsync.InvokeAsync()) : null
        });
        await UnlockUI.InvokeAsync(idInativacao);
    }
}
