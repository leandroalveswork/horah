@page "/colaborador"

@using Domain.Design.Patterns.Strategy
@using Domain.Models
@using Domain.Interfaces.Accessor
@using Domain.Interfaces.Repository
@using Domain.Interfaces.Business
@using Domain.Models.Bsn
@using Domain.Models.Bsn.Args
@using Domain.Models.Bsn.Common
@using Domain.Models.Bsn.Autorizacao
@using Domain.Models.Bsn.Colaborador
@using Domain.Models.ViewModels
@using Microsoft.AspNetCore.Mvc.Rendering
@inject IColaboradorLogadoAccessor ColaboradorLogadoAccessor
@inject IFuncionalidadeRepository FuncionalidadeRepository
@inject IAutorizacaoBusiness AutorizacaoBusiness
@inject IColaboradorBusiness ColaboradorBusiness
@inject NavigationManager UriHelper

<PageTitle>Conta</PageTitle>

<div class='d-flex flex-column'>
    <h1>Colaborador Index</h1>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Nome</label>
            <input type='text' @bind="nome" />
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Login</label>
            <input type='text' @bind="login" />
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Ativo</label>
            <select @bind="estaAtivoSelecionado">
                <option value="@HrhListaSuporteStrategy.BoolAnulavelParaValueDeOption(null)">Selecione...</option>
                <option value="@HrhListaSuporteStrategy.BoolAnulavelParaValueDeOption(true)">Sim</option>
                <option value="@HrhListaSuporteStrategy.BoolAnulavelParaValueDeOption(false)">NÃ£o</option>
            </select>
        </div>
        <div class='d-flex flex-column col-12 px-2 pt-3'>
            <button class='p-2 border-non-important border-2 border-hrh-1 hrh-bg-inherit-non-important h-100 text-hrh-1-non-important onhover-bg-hrh-1-non-important onhover-text-hrh-fundo-non-important' @onclick="SubmitPesquisarAsync" >
                <span class='oi oi-search pe-2'></span>Pesquisar
            </button>
        </div>
    </div>
    <h1 class='pt-3'><i class="bi bi-square"></i><i class="bi bi-check-square-fill"></i>Colaboradores</h1>
    <div class='row g-0 w-100 d-flex mt-3'>
        <RadzenDataGrid AllowColumnResize="true" AllowSorting="true" PageSize="5" AllowPaging="true"
            Data="@relacoes" TItem="BsnRelacaoDeColaborador">
            <Columns>
                <RadzenDataGridColumn TItem="BsnRelacaoDeColaborador" Property="Nome" Title="Nome" Frozen="true" Width="200px" />
                <RadzenDataGridColumn TItem="BsnRelacaoDeColaborador" Property="Login" Title="Login" Width="140px"/>
                <RadzenDataGridColumn TItem="BsnRelacaoDeColaborador" Property="EstaAtivo" Title="Ativo" Width="50px">
                    <Template Context="data">
                        @if(data.EstaAtivo)
                        {
                            <div>Ativo</div>
                        }
                        else
                        {
                            <div>Inativo</div>
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {
    [CascadingParameter(Name = "SetRefColaboradorAsync")]
    public EventCallback<BsnColaboradorLogado> SetRefColaboradorLogadoAsync { get; set; }
    [CascadingParameter(Name = "SetMensagemDeAlerta")]
    public EventCallback<DetalhesMensagemDeAlertaViewModel> SetMensagemDeAlerta { get; set; }
    [CascadingParameter(Name = "SetMensagemConfirmar")]
    public EventCallback<DetalhesMensagemConfirmarViewModel> SetMensagemConfirmar { get; set; }
    [CascadingParameter(Name = "LockUI")]
    public EventCallback<string> LockUI { get; set; }
    [CascadingParameter(Name = "UnlockUI")]
    public EventCallback<string> UnlockUI { get; set; }
    private string? nome;
    private string? login;
    private string? estaAtivoSelecionado;
    private string idPesquisar = MongoId.NewMongoId;
    private List<BsnRelacaoDeColaborador> relacoes = new List<BsnRelacaoDeColaborador>();

    protected override async Task OnInitializedAsync()
    {
        nome = "";
        login = "";
        estaAtivoSelecionado = HrhListaSuporteStrategy.BoolAnulavelParaValueDeOption(null);
        var resultRelacoes = await ColaboradorBusiness.PesquisarAsync(BsnPesquisaDeColaborador.SemFiltro);
        if (resultRelacoes.EstaOk)
        {
            relacoes = resultRelacoes.Resultado
                .Select(colb => new BsnRelacaoDeColaborador
                {
                    Id = colb.Id,
                    Nome = colb.Nome,
                    EstaAtivo = colb.EstaAtivo,
                    OnConfirmarPromptEstaAtivo = EventCallback.Factory.Create<BsnArgsPromptEstaAtivoColaborador>(this, OnPromptEstaAtivoColaboradorAsync)
                })
                .ToList();
        }
        else
        {
            relacoes = new List<BsnRelacaoDeColaborador>();
            await SetMensagemDeAlerta.InvokeAsync(new DetalhesMensagemDeAlertaViewModel
            {
                Titulo = Message.TituloAtencao,
                NomeDaClasseDeCssDoIcone = Message.IconeErro,
                Mensagem = resultRelacoes.Mensagem
            });
        }
    }

    public async Task SubmitPesquisarAsync()
    {
        await LockUI.InvokeAsync(idPesquisar);
        await Task.Yield();
        var bsnPesquisa = new BsnPesquisaDeColaborador()
        {
            Nome = nome ?? "",
            Login = login ?? "",
            EstaAtivo = HrhListaSuporteStrategy.ValueDeOptionParaBoolAnulavel(estaAtivoSelecionado)
        };
        var result = await ColaboradorBusiness.PesquisarAsync(bsnPesquisa);
        await UnlockUI.InvokeAsync(idPesquisar);
    }

    public async Task OnPromptEstaAtivoColaboradorAsync(BsnArgsPromptEstaAtivoColaborador args)
    {
        await SetMensagemConfirmar.InvokeAsync(new DetalhesMensagemConfirmarViewModel
        {
            Titulo = Message.TituloAtencao,
            NomeDaClasseDeCssDoIcone = Message.IconePergunta,
            Mensagem = args.EstaAtivoAtual ? Message.TemCertezaAtivar : Message.TemCertezaInativar,
            AcaoAposConfirmar = EventCallback.Factory.Create(this, async () => {
                BsnResult<object>? resultAtivarOuInativar = null;
                if (args.EstaAtivoAtual)
                {
                    resultAtivarOuInativar = await ColaboradorBusiness.AtivarAsync(args.Id);
                }
                else
                {
                    resultAtivarOuInativar = await ColaboradorBusiness.InativarAsync(args.Id);
                }
                await SetMensagemDeAlerta.InvokeAsync(new DetalhesMensagemDeAlertaViewModel
                {
                    Titulo = Message.TituloAtencao,
                    NomeDaClasseDeCssDoIcone = resultAtivarOuInativar.EstaOk ? Message.IconeSucesso : Message.IconeErro,
                    Mensagem = resultAtivarOuInativar.Mensagem
                });
            })
        });
    }

    private void ClickSolicitarNovoAcesso()
    {
        UriHelper.NavigateTo("", true);
    }

    private void ClickSolicitarExclusao()
    {
        UriHelper.NavigateTo("", true);
    }
}
