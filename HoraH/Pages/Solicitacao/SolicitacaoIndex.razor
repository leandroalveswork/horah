@page "/solicitacao"

@using Domain.Design.Patterns.Strategy
@using Domain.Models
@using Domain.Models.Bsn.Autorizacao
@using Domain.Models.Bsn.Logs
@using Domain.Models.Bsn.Mes
@using Domain.Models.Bsn.Periodo
@using Domain.Models.Bsn.Solicitacao
@using Domain.Models.ViewModels
@using Domain.Interfaces.Business

@inject ISolicitacaoBusiness SolicitacaoBusiness
@inject NavigationManager UriHelper

<PageTitle>Solicitação</PageTitle>

<div class='d-flex flex-column'>
    <h1>Filtros</h1>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Nome Solicitador</label>
            <input type='text' @bind="nomeSolicitador" />
        </div>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Tipo Solicitação</label>
            <select @bind="idTipoSolicitacao">
                <option value="">Selecione...</option>
                @foreach (var iLtTipoSolic in BsnTipoSolicitacaoLiterais.ListarTodos())
                {
                    <option value=@(iLtTipoSolic.Id)>@iLtTipoSolic.Nome</option>
                }
            </select>
        </div>
    </div>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-sm-6 col-md-4 px-2 pt-3'>
            <label>[Autopreencher Período]:</label>
            <select value=@idAutopreencher @onchange=@OnChangeIdAutopreencher>
                <option value="">Selecione...</option>
                @foreach (var iLtPeriodo in BsnPeriodoLiterais.ListarTodos())
                {
                    <option value=@(iLtPeriodo.Id)>@iLtPeriodo.Nome</option>
                }
            </select>
        </div>
        <div class='d-flex flex-row align-items-center col-sm-6 col-md-4 px-2 pt-3'>
            <HrhCheckbox @bind-EChecado=@ePesquisaPorData EDesabilitado=@false />
            <label class='ps-2'>É pesquisa por Data Específica?</label>
        </div>
        <div class='d-flex flex-row align-items-center col-sm-6 col-md-4 px-2 pt-3'>
            <HrhCheckbox @bind-EChecado=@ePesquisaPorIntervalo EDesabilitado=@false />
            <label class='ps-2'>É pesquisa por Intervalo?</label>
        </div>
    </div>
    <div class='row g-0 w-100 d-flex'>
        @if (ePesquisaPorData)
        {
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>@(ePesquisaPorIntervalo ? "Data Início" : "Data")</label>
                <input type='date' @bind="dataInicio" />
            </div>
            @if (ePesquisaPorIntervalo)
            {
                <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                    <label>Data Fim</label>
                    <input type='date' @bind="dataFim" />
                </div>
            }
        }
        else
        {
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>@(ePesquisaPorIntervalo ? "Mês Início" : "Mês")</label>
                <select @bind="idMesInicio">
                    <option value="">Selecione...</option>
                    @foreach (var iLtMes in BsnMesLiterais.ListarTodos())
                    {
                        <option value=@(iLtMes.Id)>@iLtMes.Sigla</option>
                    }
                </select>
            </div>
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>@(ePesquisaPorIntervalo ? "Ano Início" : "Ano")</label>
                <select @bind="idAnoInicio">
                    <option value="">Selecione...</option>
                    @foreach (var iAno in listaAnos)
                    {
                        <option value=@iAno>@iAno</option>
                    }
                </select>
            </div>
        }
    </div>
    @if (!ePesquisaPorData && ePesquisaPorIntervalo)
    {
        <div class='row g-0 w-100 d-flex'>
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>Mês Fim</label>
                <select @bind="idMesFim">
                    <option value="">Selecione...</option>
                    @foreach (var iLtMes in BsnMesLiterais.ListarTodos())
                    {
                        <option value=@(iLtMes.Id)>@iLtMes.Sigla</option>
                    }
                </select>
            </div>
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>Ano Fim</label>
                <select @bind="idAnoFim">
                    <option value="">Selecione...</option>
                    @foreach (var iAno in listaAnos)
                    {
                        <option value=@iAno>@iAno</option>
                    }
                </select>
            </div>
        </div>
    }
    <div class='row g-0 d-flex'>
        <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
            <label>Status Solicitação</label>
            <select @bind="idStatusSolicitacao">
                <option value="">Selecione...</option>
                @foreach (var iLtStatusSolic in BsnStatusSolicitacaoLiterais.ListarTodos())
                {
                    <option value=@(iLtStatusSolic.Id)>@iLtStatusSolic.Nome</option>
                }
            </select>
        </div>
        @if (temAprovadorOuReprovadorNaPesquisa)
        {
            <div class='d-flex flex-column col-12 col-sm-6 col-md-4 px-2 pt-3'>
                <label>Nome Aprovador/Reprovador</label>
                <input type='text' @bind="nomeAprovadorReprovador" />
            </div>
        }
    </div>
    <div class='row g-0 w-100 d-flex'>
        <div class='d-flex flex-column col-12 px-2 pt-3'>
            <button class='p-2 border-non-important border-2 border-hrh-1 hrh-bg-inherit-non-important h-100 text-hrh-1-non-important onhover-bg-hrh-1-non-important onhover-text-hrh-fundo-non-important' @onclick="SubmitPesquisarAsync" >
                <span class='oi oi-search pe-2'></span>Pesquisar
            </button>
        </div>
    </div>
    <h1 class='pt-3'>Solicitações</h1>
    <div class='w-100 mt-3 text-hrh-fundo'>
        @if (relacoes.Any())
        {
            <RadzenDataGrid AllowColumnResize="true" AllowSorting="true" PageSize="10" AllowPaging="true"
                Data="@relacoes" TItem="BsnRelacaoDeSolicitacao">
                <Columns>
                    <RadzenDataGridColumn TItem="BsnRelacaoDeSolicitacao" Property="NomeSolicitador" Title="Solicitador" Frozen="true" Width="200px" />
                    <RadzenDataGridColumn TItem="BsnRelacaoDeSolicitacao" Title="Tipo Solicitação" Width="200px" >
                        <Template Context="data">
                            <span>@(BsnTipoSolicitacaoLiterais.GetById(data.IdTipoSolicitacao).Nome)</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="BsnRelacaoDeSolicitacao" Title="Hora" Width="200px" >
                        <Template Context="data">
                            <span>@(data.HoraSolicitacao.ToString("HH:mm:ss - dd/MM/yyyy"))</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="BsnRelacaoDeSolicitacao" Title="Status" Width="100px" >
                        <Template Context="data">
                            <span>@(BsnStatusSolicitacaoLiterais.GetById(data.IdStatusSolicitacao).Nome)</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="BsnRelacaoDeSolicitacao" Property="NomeAprovadorReprovador" Title="Solicitador" Width="200px" />
                    <RadzenDataGridColumn TItem="BsnRelacaoDeSolicitacao" Title="Dados" Width="100px">
                        <Template Context="data">
                            <button class='p-2 me-2 border-non-important border-2 border-hrh-1 hrh-bg-inherit-non-important text-hrh-1-non-important onhover-bg-hrh-1-non-important onhover-text-hrh-texto-non-important' @onclick=@(() => HandleNavegarParaDetalhesSolicitacao(data.Id)) >
                                <span class='oi oi-eye px-1'></span>
                            </button>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
        else
        {
            <div>@Message.PesquisaNaoEncontrouRelacao</div>
        }
    </div>
</div>


@code {
    [CascadingParameter(Name = "SetRefColaboradorLogadoAsync")]
    public EventCallback<BsnColaboradorLogado> SetRefColaboradorLogadoAsync { get; set; }
    [CascadingParameter(Name = "SairEFecharAsync")]
    public EventCallback SairEFecharAsync { get; set; }
    [CascadingParameter(Name = "SetMensagemDeAlerta")]
    public EventCallback<DetalhesMensagemDeAlertaViewModel> SetMensagemDeAlerta { get; set; }
    [CascadingParameter(Name = "SetMensagemConfirmar")]
    public EventCallback<DetalhesMensagemConfirmarViewModel> SetMensagemConfirmar { get; set; }
    [CascadingParameter(Name = "LockUI")]
    public EventCallback<string> LockUI { get; set; }
    [CascadingParameter(Name = "UnlockUI")]
    public EventCallback<string> UnlockUI { get; set; }
    [CascadingParameter(Name = "VoltarAsync")]
    public EventCallback VoltarAsync { get; set; }
    private string? nomeSolicitador;
    private string? idTipoSolicitacao;
    
    private bool ePesquisaPorData;
    private bool ePesquisaPorIntervalo;
    private DateTime? dataInicio;
    private DateTime? dataFim;
    private string? idAutopreencher;
    private string? idMesInicio;
    private string? idAnoInicio;
    private string? idMesFim;
    private string? idAnoFim;
    
    private List<int> listaAnos = HrhListaSuporteStrategy.ListarEsteEUltimos20Anos();
    private string? idStatusSolicitacao;
    private string? nomeAprovadorReprovador;
    private bool temAprovadorOuReprovadorNaPesquisa
    {
        get
        {
            var ltStatusSolic = BsnStatusSolicitacaoLiterais.GetByIdOrDefault(idStatusSolicitacao ?? "");
            if (ltStatusSolic is null)
            {
                return false;
            }
            return (ltStatusSolic.Id == BsnStatusSolicitacaoLiterais.Aprovada.Id || ltStatusSolic.Id == BsnStatusSolicitacaoLiterais.Reprovada.Id);
        }
    }

    private string idPesquisar = MongoId.NewMongoId;
    private List<BsnRelacaoDeSolicitacao> relacoes = new List<BsnRelacaoDeSolicitacao>();


    private bool deveCarregarDados = false;
    protected override void OnInitialized()
    {
        deveCarregarDados = true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (deveCarregarDados)
        {
            nomeSolicitador = "";
            idTipoSolicitacao = "";
            ePesquisaPorData = false;
            ePesquisaPorIntervalo = false;
            dataInicio = null;
            dataFim = null;
            idAutopreencher = "";
            idMesInicio = "";
            idMesFim = "";
            idAnoInicio = "";
            idAnoFim = "";
            idStatusSolicitacao = "";
            nomeAprovadorReprovador = "";
            await CarregarRelacoesAsync(BsnPesquisaDeSolicitacao.SemFiltros);
            deveCarregarDados = false;
            StateHasChanged();
        }
    }
    
    public async Task CarregarRelacoesAsync(BsnPesquisaDeSolicitacao pesquisa)
    {
        var resultRelacoes = await SolicitacaoBusiness.PesquisarAsync(pesquisa, TimeZoneInfo.Local);
        if (resultRelacoes.EstaOk)
        {
            relacoes = resultRelacoes.Resultado;
        }
        else
        {
            await SetMensagemDeAlerta.InvokeAsync(new DetalhesMensagemDeAlertaViewModel
            {
                Titulo = Message.TituloAtencao,
                NomeDaClasseDeCssDoIcone = Message.IconeErro,
                Mensagem = resultRelacoes.Mensagem
            });
        }
    }
    
    public void OnChangeIdAutopreencher(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }
        var nextIdAutopreencherAsString = args.Value.ToString();
        if (string.IsNullOrEmpty(nextIdAutopreencherAsString))
        {
            return;
        }
        HandleChangeIdAutoPreencher(nextIdAutopreencherAsString);
    }

    public void HandleChangeIdAutoPreencher(string nextIdAutopreencher)
    {
        var periodoAuto = BsnPeriodoLiterais.GetByIdOrDefault(nextIdAutopreencher);
        if (periodoAuto == null)
        {
            idAutopreencher = nextIdAutopreencher;
            StateHasChanged();
            return;
        }
        if (periodoAuto.PeriodoArgs.EPorMes)
        {
            var periodoArgsMes = (BsnPeriodoPorMesArgs)periodoAuto.PeriodoArgs;
            ePesquisaPorData = false;
            ePesquisaPorIntervalo = false;
            idMesInicio = periodoArgsMes.IdMes;
            idAnoInicio = periodoArgsMes.IdAno;
            idAutopreencher = nextIdAutopreencher;
            StateHasChanged();
            return;
        }
        var periodoArgs = (BsnPeriodoPorDataArgs)periodoAuto.PeriodoArgs;
        ePesquisaPorData = true;
        ePesquisaPorIntervalo = true;
        dataInicio = periodoArgs.DataInicioInclusive;
        dataFim = periodoArgs.DataFimInclusive;
        idAutopreencher = nextIdAutopreencher;
        StateHasChanged();
        return;
    }

    public async Task SubmitPesquisarAsync()
    {
        await LockUI.InvokeAsync(idPesquisar);
        await Task.Yield();
        var pesquisaSubmit = new BsnPesquisaDeSolicitacao
        {
            NomeSolicitador = nomeSolicitador,
            IdTipoSolicitacao = idTipoSolicitacao,
            IdStatusSolicitacao = idStatusSolicitacao,
            NomeAprovadorReprovador = nomeAprovadorReprovador
        };
        if (ePesquisaPorData)
        {
            var periodoEspecificoData = new BsnPesquisaPorPeriodoData
            {
                DataInicioInclusive = dataInicio,
                DataFimInclusive = dataFim
            };
            if (!ePesquisaPorIntervalo)
            {
                periodoEspecificoData.DataFimInclusive = dataInicio;
            }
            pesquisaSubmit.Periodo = periodoEspecificoData;
        }
        else
        {
            var periodoEspecificoMes = new BsnPesquisaPorPeriodoMes
            {
                IdMesInicioInclusive = idMesInicio,
                IdAnoInicioInclusive = idAnoInicio,
                IdMesFimInclusive = idMesFim,
                IdAnoFimInclusive = idAnoFim
            };
            if (!ePesquisaPorIntervalo)
            {
                periodoEspecificoMes.IdMesFimInclusive = idMesInicio;
                periodoEspecificoMes.IdAnoFimInclusive = idAnoInicio;
            }
            pesquisaSubmit.Periodo = periodoEspecificoMes;
        }
        await CarregarRelacoesAsync(pesquisaSubmit);
        await UnlockUI.InvokeAsync(idPesquisar);
    }
    
    public void HandleNavegarParaDetalhesSolicitacao(string id)
    {
        UriHelper.NavigateTo($"/solicitacao/detalhes?id=" + id, true);
    }
}